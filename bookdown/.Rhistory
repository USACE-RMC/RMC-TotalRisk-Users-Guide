geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
library(lmom)
samlmu(log10(x))
pelpe3(samlmu(log10(x)))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(4947, 16511,	27687, 85583),
p05 = c(2181, 5778, 7785, 12966),
eaep = c(0.1037,	0.0209,	0.0108,	0.0028),
eQ = c(3294,	9350,	13511, 28542))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison of R-Stan to FLIKE for Example #4", subtitle = "Binomial Censoring") +
scale_y_continuous(limits = c(10, 1E6), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(4947, 16511,	27687, 85583),
p05 = c(2181, 5778, 7785, 12966),
eaep = c(0.1037,	0.0209,	0.0108,	0.0028),
eQ = c(3294,	9350,	13511, 28542))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison of R-Stan to FLIKE for Example #4", subtitle = "Binomial Censoring") +
scale_y_continuous(limits = c(10, 1E6), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
remotes::install_github("rfsaldanha/rspell")
install.packages("remotes")
remotes::install_github("nevrome/wellspell.addin")
remotes::install_github("nevrome/wellspell.addin")
wellspell.addin:::spellcheck()
install.packages("hunspell")
wellspell.addin:::spellcheck()
wellspell.addin:::set_config_gramcheck()
install.packages("tinytex")
remotes::install_github("nevrome/LanguageToolR")
wellspell.addin:::gramcheck()
wellspell.addin:::gramcheck()
remove.packages("wellspell.addin")
remove.packages("rspell")
tinytex::tlmgr_install("xetex")
tinytex::install_tinytex()
tinytex::tlmgr_install("xetex")
# Case Study: Australia Rainfall Runoff (ARR) Example 3 - Hunt River at Singleton Peak Flow.
# ==============================================================================================================
library(mvtnorm)
library(ggplot2)
# Set working directory
setwd("C:/Users/Q0RMCCHS/Documents/0_RMC_Work/R Scripts/ARR-FLIKE")
source("FlikeEmulator.R")
#### Example 3 Gage Data ####
# https://www.arr-software.org/pdfs/ARR_190514_Book3.pdf
# Hunt River at Singleton Peak Flow
x = c(76.26,	171.87,	218.21,	668.79,	1374.42, 124.12, 276.3, 895.5, 1374.42, 280.18,	202.62,	4052.42,
2323.77, 2536.31, 3315.62, 1232.73, 1391.43, 12525.66,	1099.54,447.75,	478.92,	180.52, 164.36,
229.54,	2125.4,	966.35,	2751.68, 49.03, 76.51, 912.5, 926.67)
# The annual exceedance probability (AEP) values for frequency curve plot
AEPs = c( 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5,0.7, 0.8, 0.9)
#### Perform Bayesian estimation using Self-Normalizing Importance Sampling ####
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
# Import data
# Change the location for your computer
data = read.csv("C:\\Users\\Q0RMCCHS\\Documents\\0_RMC_Work\\MS Excel Spreadsheets\\Seismic4.csv")
View(data)
# perform logistic regression with built in package
logReg = glm(formula = Liq ~ Mw + log(CSR) + I(Vs1^4) - 1, data = data, family = binomial)
summary(logReg)
# coeff - regression coefficients
# p - probability of interest
# Mw - earthquake magnitude of interest
# Vs1 - shear-wave velocity of interest
CSR = function(coeff, p, Mw, Vs1){
b1 = coeff[1]
b2 = coeff[2]
b3 = coeff[3]
return(exp((log(p/(1-p))-b1*Mw-b3*Vs1^4)/b2))
}
# create prediction data
Vs1data = seq(0,450, 5)
CSRdata = numeric(length(Vs1data))
for (i in 1:length(Vs1data)){
CSRdata[i] = CSR(logReg$coefficients, 0.3, 7.5, Vs1data[i])
}
# sort data by liquefaction and no liquefaction
liqData = data[which(data$Liq==1),]
noliqData = data[which(data$Liq==0),]
# create plot
plot(liqData$Vs1, liqData$CSR, xlim = c(0,450), col = "red", ylim=c(0,0.9), xlab="Vs1", ylab = "CSR", main = "P = 0.3, Mw = 7.5")
points(noliqData$Vs1, noliqData$CSR, col="blue")
lines(Vs1data,CSRdata)
# coeff - regression coefficients
# Mw - earthquake magnitude of interest
# CSR - cyclic stress ratio
# Vs1 - shear-wave velocity of interest
probability = function(coeff, Mw, CSR, Vs1){
b1 = coeff[1]
b2 = coeff[2]
b3 = coeff[3]
return(1/(1+exp(-(b1*Mw + b2*log(CSR) + b3*Vs1^4))))
}
# create prediction data
Mwdata = seq(4,8, 0.1)
Pdata = numeric(length(Mwdata))
for (i in 1:length(Mwdata)){
Pdata[i] = probability(logReg$coefficients, Mwdata[i], 0.5, 250)
}
# create plot
plot(Mwdata, Pdata, xlim = c(4,8), col = "red", type="l", ylim=c(0,1), xlab="Mw", ylab = "Probability of Liquefaction", main = "CSR = 0.5, Vs1 = 250")
# Get covariance matrix of logistic regression
vcov = vcov(logReg)
#### Monte Carlo Confidence Intervals ####
library(MASS)
# Create confidence intervals by simulating regression coefficients from a multivariate Normal distribution
# Number of Monte Carlo realizations
R = 10000
# Step 1 - Simulate coefficients
coeffs = mvrnorm(R,logReg$coefficients, vcov)
# Step 2 - Record probabilities given simulated regression coefficients and a variable Mw but fixed CSR and Vs1
mcPvals = matrix(nrow = R, ncol = length(Mwdata))
for (i in 1:R){
for (j in 1:length(Mwdata)){
mcPvals[i,j] = probability(coeffs[i,], Mwdata[j], 0.5, 250)
}
}
# Step 3 - Compute 5% and 95% percentiles from the simulated probability values
mcCI = matrix(nrow = length(Mwdata), ncol=2)
for (i in 1:length(Mwdata)){
mcCI[i,1] = quantile(mcPvals[,i], 0.05)
mcCI[i,2] = quantile(mcPvals[,i], 0.95)
}
# create plot
plot(Mwdata, Pdata, xlim = c(4,8), col = "red", type="l", ylim=c(0,1), xlab="Mw", ylab = "Probability of Liquefaction", main = "CSR = 0.5, Vs1 = 250")
lines(Mwdata, mcCI[,1], col = "red", type="l", lty=2)
lines(Mwdata, mcCI[,2], col = "red", type="l", lty=2)
install.packages(c("BH", "bit", "bit64", "bitops", "bookdown", "caret", "caTools", "clarabel", "class", "classInt", "cli", "colorspace", "copula", "curl", "CVXR", "data.table", "digest", "distributional", "dotCall64", "e1071", "EnvStats", "evaluate", "evd", "fda", "fields", "FNN", "future.apply", "geosphere", "gower", "gplots", "gtable", "inline", "knitr", "ks", "lava", "lmom", "lmomRFA", "loo", "lpSolve", "lubridate", "maps", "matrixStats", "mvtnorm", "ncdf4", "nloptr", "parallelly", "pcaPP", "pkgbuild", "pkgload", "posterior", "POT", "processx", "progressr", "ps", "pspline", "QuickJSR", "randtoolbox", "raster", "rbibutils", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "rgeoda", "rgl", "Rmpfr", "rngWELL", "s2", "sf", "spam", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.univar", "spatstat.utils", "stabledist", "StanHeaders", "terra", "testthat", "timeDate", "waldo", "wk", "xfun", "xts", "yaml"))
install.packages(c("BH", "bit", "bit64", "bitops", "bookdown", "caret", "caTools", "clarabel", "class", "classInt", "cli", "colorspace", "copula", "curl", "CVXR", "data.table", "digest", "distributional", "dotCall64", "e1071", "EnvStats", "evaluate", "evd", "fda", "fields", "FNN", "future.apply", "geosphere", "gower", "gplots", "gtable", "inline", "knitr", "ks", "lava", "lmom", "lmomRFA", "loo", "lpSolve", "lubridate", "maps", "matrixStats", "mvtnorm", "ncdf4", "nloptr", "parallelly", "pcaPP", "pkgbuild", "pkgload", "posterior", "POT", "processx", "progressr", "ps", "pspline", "QuickJSR", "randtoolbox", "raster", "rbibutils", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "rgeoda", "rgl", "Rmpfr", "rngWELL", "s2", "sf", "spam", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.univar", "spatstat.utils", "stabledist", "StanHeaders", "terra", "testthat", "timeDate", "waldo", "wk", "xfun", "xts", "yaml"))
install.packages(c("BH", "bit", "bit64", "bitops", "bookdown", "caret", "caTools", "clarabel", "class", "classInt", "cli", "colorspace", "copula", "curl", "CVXR", "data.table", "digest", "distributional", "dotCall64", "e1071", "EnvStats", "evaluate", "evd", "fda", "fields", "FNN", "future.apply", "geosphere", "gower", "gplots", "gtable", "inline", "knitr", "ks", "lava", "lmom", "lmomRFA", "loo", "lpSolve", "lubridate", "maps", "matrixStats", "mvtnorm", "ncdf4", "nloptr", "parallelly", "pcaPP", "pkgbuild", "pkgload", "posterior", "POT", "processx", "progressr", "ps", "pspline", "QuickJSR", "randtoolbox", "raster", "rbibutils", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "rgeoda", "rgl", "Rmpfr", "rngWELL", "s2", "sf", "spam", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.univar", "spatstat.utils", "stabledist", "StanHeaders", "terra", "testthat", "timeDate", "waldo", "wk", "xfun", "xts", "yaml"))
# Import data
# Change the location for your computer
data = read.csv("C:\\Users\\Q0RMCCHS\\Documents\\0_RMC_Work\\MS Excel Spreadsheets\\Seismic4.csv")
# perform logistic regression with built in package
logReg = glm(formula = Liq ~ Mw + log(CSR) + I(Vs1^4) - 1, data = data, family = binomial)
summary(logReg)
# coeff - regression coefficients
# p - probability of interest
# Mw - earthquake magnitude of interest
# Vs1 - shear-wave velocity of interest
CSR = function(coeff, p, Mw, Vs1){
b1 = coeff[1]
b2 = coeff[2]
b3 = coeff[3]
return(exp((log(p/(1-p))-b1*Mw-b3*Vs1^4)/b2))
}
# create prediction data
Vs1data = seq(0,450, 5)
CSRdata = numeric(length(Vs1data))
for (i in 1:length(Vs1data)){
CSRdata[i] = CSR(logReg$coefficients, 0.3, 7.5, Vs1data[i])
}
# sort data by liquefaction and no liquefaction
liqData = data[which(data$Liq==1),]
noliqData = data[which(data$Liq==0),]
# create plot
plot(liqData$Vs1, liqData$CSR, xlim = c(0,450), col = "red", ylim=c(0,0.9), xlab="Vs1", ylab = "CSR", main = "P = 0.3, Mw = 7.5")
points(noliqData$Vs1, noliqData$CSR, col="blue")
lines(Vs1data,CSRdata)
# coeff - regression coefficients
# Mw - earthquake magnitude of interest
# CSR - cyclic stress ratio
# Vs1 - shear-wave velocity of interest
probability = function(coeff, Mw, CSR, Vs1){
b1 = coeff[1]
b2 = coeff[2]
b3 = coeff[3]
return(1/(1+exp(-(b1*Mw + b2*log(CSR) + b3*Vs1^4))))
}
# create prediction data
Mwdata = seq(4,8, 0.1)
Pdata = numeric(length(Mwdata))
for (i in 1:length(Mwdata)){
Pdata[i] = probability(logReg$coefficients, Mwdata[i], 0.5, 250)
}
# create plot
plot(Mwdata, Pdata, xlim = c(4,8), col = "red", type="l", ylim=c(0,1), xlab="Mw", ylab = "Probability of Liquefaction", main = "CSR = 0.5, Vs1 = 250")
# Get covariance matrix of logistic regression
vcov = vcov(logReg)
lty
#### Monte Carlo Confidence Intervals ####
library(MASS)
# Create confidence intervals by simulating regression coefficients from a multivariate Normal distribution
# Number of Monte Carlo realizations
R = 10000
# Step 1 - Simulate coefficients
coeffs = mvrnorm(R,logReg$coefficients, vcov)
# Step 2 - Record probabilities given simulated regression coefficients and a variable Mw but fixed CSR and Vs1
mcPvals = matrix(nrow = R, ncol = length(Mwdata))
for (i in 1:R){
for (j in 1:length(Mwdata)){
mcPvals[i,j] = probability(coeffs[i,], Mwdata[j], 0.5, 250)
}
}
# Step 3 - Compute 5% and 95% percentiles from the simulated probability values
mcCI = matrix(nrow = length(Mwdata), ncol=2)
for (i in 1:length(Mwdata)){
mcCI[i,1] = quantile(mcPvals[,i], 0.05)
mcCI[i,2] = quantile(mcPvals[,i], 0.95)
}
# create plot
plot(Mwdata, Pdata, xlim = c(4,8), col = "red", type="l", ylim=c(0,1), xlab="Mw", ylab = "Probability of Liquefaction", main = "CSR = 0.5, Vs1 = 250")
lines(Mwdata, mcCI[,1], col = "red", type="l", lty=2)
lines(Mwdata, mcCI[,2], col = "red", type="l", lty=2)
# create plot
plot(Mwdata, Pdata, xlim = c(3,9), col = "red", type="l", ylim=c(0,1), xlab="Mw", ylab = "Probability of Liquefaction", main = "CSR = 0.5, Vs1 = 250")
lines(Mwdata, mcCI[,1], col = "red", type="l", lty=2)
lines(Mwdata, mcCI[,2], col = "red", type="l", lty=2)
