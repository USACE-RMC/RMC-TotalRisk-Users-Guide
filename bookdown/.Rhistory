for (i in 1:realz){
sumW = sumW + exp(posterior.samples[i, 5] - maxLH)
}
norm = maxLH + log(sumW)
posterior.samples[, 5] = exp(posterior.samples[, 5] - norm)
# Step 4. Create the posterior mode frequency curve
# NOTE: Flike does not output the posterior mode even though it is used when creating the importance distribution.
# NOTE: RMC-BestFit outputs the posterior mode as the default "point estimate".
mode.params = map$par
posterior.mode = numeric(length(aeps))
for (i in 1:length(aeps)){
posterior.mode[i] = icdf(1-AEPs[i], mode.params[1], mode.params[2], mode.params[3])
}
# Step 5. Create the posterior mean frequency curve
# NOTE: Flike outputs the posterior mean as the default "point estimate."
mean.params = numeric(3)
for (i in 1:3){
for (j in 1:realz){
mean.params[i] = mean.params[i] + posterior.samples[j, i] * posterior.samples[j,5]
}
}
posterior.mean = numeric(length(aeps))
for (i in 1:length(aeps)){
posterior.mean[i] = icdf(1-AEPs[i], mean.params[1], mean.params[2], mean.params[3])
}
# Step 6. Create x-value bins for the credible intervals and posterior predictive distribution
# Stratify x-values on a log-scale
minX = log10(.icdf(0.001, map$par[1], map$par[2], map$par[3])) - 2
maxX = log10(.icdf(0.999, map$par[1], map$par[2], map$par[3])) + 2
nBins = 100
x = numeric(nBins) # x values
delta = (maxX - minX)/(nBins-1)
x[1] = minX
for (i in 2:nBins) {
x[i] = x[i - 1] + delta
}
# Estimate intervals and expected probability
lci = numeric(nBins) # lower CI
uci = numeric(nBins) # upper CI
ep = numeric(nBins)  # expected probabilities
for (i in 1:nBins) {
cdf = matrix(nrow=realz, ncol=2)
for (j in 1:realz) {
cdf[j, 1] = .cdf(10^x[i], posterior.samples[j,1],  posterior.samples[j,2], posterior.samples[j,3])
cdf[j, 2] = posterior.samples[j,5]
ep[i] = ep[i] + cdf[j] * posterior.samples[j,5] # expected probability
}
# Sort cdf in ascending order and accumulate the weights
cdf = cdf[order(cdf[,1], decreasing = FALSE),]
for (j in 2:realz){
cdf[j, 2] = cdf[j, 2] + cdf[j - 1, 2]
}
# Get aeps given x
lci[i] = 1-cdf[max(which(cdf[,2] <= (1-alpha)/2, arr.ind = TRUE)), 1]
uci[i] = 1-cdf[max(which(cdf[,2] <= 1-(1-alpha)/2, arr.ind = TRUE)), 1]
ep[i] = 1-ep[i]
}
# Finally, we need to interpolate the curves given the list of AEPs
credible.intervals = matrix(nrow=length(aeps), ncol=2)
credible.intervals[,1] = 10^approx(x = uci,  y = x, xout = AEPs)$y
credible.intervals[,2] = 10^approx(x = lci,  y = x, xout = AEPs)$y
posterior.predictive = 10^approx(x = ep,  y = x, xout = AEPs)$y
# =================================================
# Save output values in list object
# =================================================
opt$aeps = aeps
opt$vcov = vcov
opt$vcov_inflated = vcov_inflated
opt$posterior.samples = posterior.samples
opt$mode.params = mode.params
opt$mean.params = mean.params
opt$posterior.mode = posterior.mode
opt$posterior.mean = posterior.mean
opt$posterior.predictive = posterior.predictive
opt$credible.intervals = credible.intervals
class(opt) = "FlikeEmulator"
return(opt)
}
# =================================================
# Control function
# =================================================
FlikeEmulator_control <- function(maxit = 5000, ...)
{
ctrl = c(list(maxit = maxit), list(...))
if(!is.null(ctrl$fnscale)) warning("fnscale must not be modified")
ctrl$fnscale = -1
if(is.null(ctrl$reltol)) ctrl$reltol = .Machine$double.eps^(1)
if(is.null(ctrl$abstol)) ctrl$abstol = .Machine$double.eps^(1)
invisible(ctrl)
}
#' @param x The vector of exact data
#' @param xt The perception threshold. Default is nothing.
#' @param nabove The number of events above the threshold. Default is nothing.
#' @param name The number of events below the threshold. Default is nothing.
#' @param regSkew The regional skew estimate. Default is nothing.
#' @param regSkewRMSE The root mean square error of the regional skew estimate. Default is nothing.
FlikeEmulator_Data <- function(x, xt = NULL, nabove = NULL, nbelow = NULL, regSkew = NULL, regSkewRMSE = NULL){
return(list("x" = x, "xt" = xt, "nabove" = nabove, "nbelow" = nbelow, "regskew" = regSkew, "regSkewRSME" = regSkewRMSE))
}
data = FlikeEmulator_Data(x=data)
bayes = FlikeEmulator(data, c(2.5, 0.5, 0.0), dist_type = "LP3")
View(data)
source("FlikeEmulator.R")
data = c(76.26,	171.87,	218.21,	668.79,	1374.42, 124.12, 276.3, 895.5, 1374.42, 280.18,	202.62,	4052.42,
2323.77, 2536.31, 3315.62, 1232.73, 1391.43, 12525.66,	1099.54,447.75,	478.92,	180.52, 164.36,
229.54,	2125.4,	966.35,	2751.68, 49.03, 76.51, 912.5, 926.67)
#### Define the simulation input and output options ####
seed = 123 # The pseudo random number generator (PRNG) seed
realz = 30000 # The number of Monte Carlo realizations
nBins = 100 # The number of x-value bins used for creating the frequency curve
alpha = 0.9 # The credible interval width. 0.9 gives 90% CIs.
# The annual exceedance probability (AEP) values for frequency curve plot
AEPs = c( 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5,0.7, 0.8, 0.9)
data = FlikeEmulator_Data(x=data)
bayes = FlikeEmulator(data = data, init = c(2.5, 0.5, 0.0), dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = data, init = c(2.5, 0.5, 0.0), dist_type = "LP3")
bayes = FlikeEmulator(data = data, init = c(2.5, 0.5, 0.0), aeps = AEPs, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = data, init = c(2.5, 0.5, 0.0), aeps = AEPs, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = data, init = c(2.5, 0.5, 0.0), aeps = AEPs, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
d = sort(data, decreasing = TRUE)
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
d = sort(data, decreasing = TRUE)
x = c(76.26,	171.87,	218.21,	668.79,	1374.42, 124.12, 276.3, 895.5, 1374.42, 280.18,	202.62,	4052.42,
2323.77, 2536.31, 3315.62, 1232.73, 1391.43, 12525.66,	1099.54,447.75,	478.92,	180.52, 164.36,
229.54,	2125.4,	966.35,	2751.68, 49.03, 76.51, 912.5, 926.67)
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(d), ncol=2)
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(d), ncol=2)
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
library(lmom)
samlmu(log10(x))
pelpe3(samlmu(log10(x)))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), init = c(2.5, 0.5, 0.0), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(8408, 51010, 107122, 570635),
p05 = c(2229, 5502, 7188,	11507),
eaep = c(0.101, 0.0232, 0.0136,	0.0048),
eQ = c(3929, 12786, 19572, 47034))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison with FLIKE for Example #3", subtitle = "Systematic Data Only") +
scale_y_continuous(limits = c(10, 1E7), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6, 1E7), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(4947, 16511,	27687, 85583),
p05 = c(2181, 5778, 7785, 12966),
eaep = c(0.1037,	0.0209,	0.0108,	0.0028),
eQ = c(3294,	9350,	13511, 28542))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison of R-Stan to FLIKE for Example #4", subtitle = "Binomial Censoring") +
scale_y_continuous(limits = c(10, 1E6), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
source("FlikeEmulator.R")
bayes = FlikeEmulator(data = FlikeEmulator_Data(x=x, xt = 12525, nabove = 1, nbelow = 118), aeps = AEPs, realz = 30000, dist_type = "LP3")
# Create points for observed data
# Points are plotted using the Cunanne plotting position formula.
x = sort(x, decreasing = TRUE)
observed = matrix(nrow = length(x), ncol=2)
for (i in 1:length(x)){
observed[i,1] = ((i-0.4)/(length(x)+1-2*0.4))
observed[i,2] = x[i]
}
observed = as.data.frame(observed)
colnames(observed)= c("pp", "flow")
### Create Report Quality Plot ####
AEPBreaks = c(0.0000001,0.000001, 0.00001, 0.0001, 0.001,  0.01, 0.1, 0.5, 0.9, 0.99)
AEPLabels = c("1E-7","1E-6", "1E-5", "1E-4", "0.001",  "0.01", "0.1", "0.5", "0.9", "0.99")
curves = data.frame(aep = AEPs,
p95 = bayes$credible.intervals[,2],
p05 = bayes$credible.intervals[,1],
pred = bayes$posterior.predictive,
mode = bayes$posterior.mode,
mean = bayes$posterior.mean)
# These are the FLIKE results for comparison
flikeCurves = data.frame(aep = c(0.1, 0.02, 0.01, 0.002),
p95 = c(4947, 16511,	27687, 85583),
p05 = c(2181, 5778, 7785, 12966),
eaep = c(0.1037,	0.0209,	0.0108,	0.0028),
eQ = c(3294,	9350,	13511, 28542))
ggplot()+
geom_ribbon(data=curves, aes(x=qnorm(1-aep), y=mean, ymin=p05, ymax=p95), fill = "steelblue", alpha = 0.3)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=pred), linetype = "dotdash", color="blue", size = 0.5)+
geom_line(data=curves, aes(x=qnorm(1-aep), y=mean), size = 0.5)+
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), linetype = "dashed", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), linetype = "dotdash", color="red", size = 0.5) +
geom_line(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 0.5) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p95), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=p05), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-eaep), y=eQ), color="red", size = 1) +
geom_point(data=flikeCurves, aes(x=qnorm(1-aep), y=eQ), color="red", size = 1) +
geom_point(data=observed, aes(x=qnorm(1-pp), y=flow), fill = "gray", color = "black", pch=21, size = 2)+
xlab("Annual Exceedance Probability") +
ylab("Peak Flow (CMS)") +
ggtitle("Comparison of R-Stan to FLIKE for Example #4", subtitle = "Binomial Censoring") +
scale_y_continuous(limits = c(10, 1E6), trans = "log10", breaks = c(10, 100, 1E3, 1E4, 1E5, 1E6), labels = scales::comma) +
scale_x_continuous(limits = c(qnorm(0.1), qnorm(1-1E-3)), breaks=qnorm(1-AEPBreaks),labels=AEPLabels) +
theme_classic() +
theme(axis.text = element_text(size = 10)) +
theme(panel.grid.major.x = element_line( size=.1, color="gray90"))  +
theme(panel.grid.major.y = element_line( size=.1, color="gray90"))
remotes::install_github("rfsaldanha/rspell")
install.packages("remotes")
remotes::install_github("nevrome/wellspell.addin")
remotes::install_github("nevrome/wellspell.addin")
wellspell.addin:::spellcheck()
install.packages("hunspell")
wellspell.addin:::spellcheck()
wellspell.addin:::set_config_gramcheck()
install.packages("tinytex")
remotes::install_github("nevrome/LanguageToolR")
wellspell.addin:::gramcheck()
wellspell.addin:::gramcheck()
remove.packages("wellspell.addin")
remove.packages("rspell")
tinytex::tlmgr_install("xetex")
tinytex::install_tinytex()
tinytex::tlmgr_install("xetex")
